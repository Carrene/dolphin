"""empty message

Revision ID: 5f206088190d
Revises: 936c432ce331
Create Date: 2019-06-16 13:00:31.184805

"""
import sqlalchemy as sa
from alembic import op
from restfulpy.orm import Field, DeclarativeBase
from sqlalchemy import orm, Integer, ForeignKey, DateTime, String
from sqlalchemy.dialects import postgresql

from dolphin.models.issue_phase import IssuePhase
from dolphin.models.item import Item


item_statuses = [
    'in-progress',
    'done',
]


# revision identifiers, used by Alembic.
revision = '5f206088190d'
down_revision = '936c432ce331'
branch_labels = None
depends_on = None


def upgrade():

    class OldItem(DeclarativeBase):
        __tablename__ = 'old_item'

        id = Field(
            Integer,
            primary_key=True,
        )
        start_date = Field(
            DateTime,
        )
        end_date = Field(
            DateTime,
        )
        estimated_hours = Field(
            Integer,
        )
        description = Field(
            String,
        )
        phase_id = Field(
            Integer,
            ForeignKey('phase.id'),
        )
        issue_id = Field(
            Integer,
            ForeignKey('issue.id'),
        )
        member_id = Field(
            Integer,
            ForeignKey('member.id'),
        )

    bind = op.get_bind()
    session = orm.Session(bind=bind)

    # ### commands auto generated by Alembic - please adjust! ###

    op.execute("CREATE TABLE old_item AS select * from item;")
    op.create_table(
        'issue_phase',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('phase_id', sa.Integer(), nullable=False),
        sa.Column('issue_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['issue_id'], ['issue.id'], ),
        sa.ForeignKeyConstraint(['phase_id'], ['phase.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.execute(
        "CREATE TYPE issue_stage AS ENUM ('triage', 'backlog', 'working', 'on-hold');"
    )
    op.execute("ALTER TABLE issue ADD stage issue_stage;")
    op.execute("UPDATE issue SET stage = 'triage';")
    op.add_column('issue', sa.Column('is_done', sa.Boolean(), nullable=True))
    op.drop_column('issue', 'status')


    op.add_column(
        'item',
        sa.Column('issue_phase_id', sa.Integer(), nullable=True)
    )
    olditems = session.query(OldItem).all()
    for item in olditems:
        issue_phase = session.query(IssuePhase) \
            .filter(
                IssuePhase.issue_id == item.issue_id,
                IssuePhase.phase_id == item.phase_id
            ) \
            .one_or_none()
        if issue_phase is None:
            issue_phase = IssuePhase(
                issue_id=item.issue_id,
                phase_id=item.phase_id,
            )
            session.add(issue_phase)
            session.commit()

        new_item = session.query(Item).get(item.id)
        new_item.issue_phase_id = issue_phase.id
        session.commit()

    op.drop_constraint(
        'item_phase_id_issue_id_member_id_key',
        'item', type_='unique'
    )
    op.drop_constraint('item_issue_id_fkey', 'item', type_='foreignkey')
    op.drop_constraint('item_phase_id_fkey', 'item', type_='foreignkey')
    op.create_foreign_key(
        None,
        'item',
        'issue_phase',
        ['issue_phase_id'],
        ['id']
    )
    op.drop_column('item', '_last_status_change')
    op.drop_column('item', 'phase_id')
    op.drop_column('item', '_status')
    op.drop_column('item', 'issue_id')

    op.execute("DROP TABLE IF EXISTS old_item;")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        'item',
        sa.Column(
            'issue_id',
            sa.INTEGER(),
            autoincrement=False,
            nullable=False)
    )
    op.add_column(
        'item',
        sa.Column(
            '_status',
            postgresql.ENUM('in-progress', 'done', name='item_status'),
            autoincrement=False,
            nullable=True
        )
    )
    op.add_column(
        'item',
        sa.Column(
            'phase_id',
            sa.INTEGER(),
            autoincrement=False,
            nullable=False
        )
    )
    op.add_column(
        'item',
        sa.Column(
            '_last_status_change',
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True
        )
    )
    op.drop_constraint(None, 'item', type_='foreignkey')
    op.create_foreign_key(
        'item_phase_id_fkey',
        'item',
        'phase',
        ['phase_id'],
        ['id']
    )
    op.create_foreign_key(
        'item_issue_id_fkey',
        'item',
        'issue',
        ['issue_id'],
        ['id']
    )
    op.create_unique_constraint(
        'item_phase_id_issue_id_member_id_key',
        'item',
        ['phase_id', 'issue_id', 'member_id']
    )
    op.drop_column('item', 'issue_phase_id')
    op.add_column(
        'issue',
        sa.Column(
            'status',
            postgresql.ENUM(
                'to-do',
                'in-progress',
                'on-hold',
                'complete',
                'done',
                name='issues_status'
            ),
            autoincrement=False,
            nullable=False
        )
    )
    op.drop_column('issue', 'stage')
    op.drop_column('issue', 'is_done')
    op.drop_table('issue_phase')
    # ### end Alembic commands ###

